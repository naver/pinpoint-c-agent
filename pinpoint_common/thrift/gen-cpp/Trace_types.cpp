////////////////////////////////////////////////////////////////////////////////
// Copyright 2018 NAVER Corp.
// 
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy
// of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
// License for the specific language governing permissions and limitations under
// the License.
////////////////////////////////////////////////////////////////////////////////
/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Trace_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




TIntStringValue::~TIntStringValue() throw() {
}


void TIntStringValue::__set_intValue(const int32_t val) {
  this->intValue = val;
}

void TIntStringValue::__set_stringValue(const std::string& val) {
  this->stringValue = val;
__isset.stringValue = true;
}

uint32_t TIntStringValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->intValue);
          this->__isset.intValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringValue);
          this->__isset.stringValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TIntStringValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TIntStringValue");

  xfer += oprot->writeFieldBegin("intValue", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->intValue);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.stringValue) {
    xfer += oprot->writeFieldBegin("stringValue", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->stringValue);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TIntStringValue &a, TIntStringValue &b) {
  using ::std::swap;
  swap(a.intValue, b.intValue);
  swap(a.stringValue, b.stringValue);
  swap(a.__isset, b.__isset);
}

TIntStringValue::TIntStringValue(const TIntStringValue& other0) {
  intValue = other0.intValue;
  stringValue = other0.stringValue;
  __isset = other0.__isset;
}
TIntStringValue& TIntStringValue::operator=(const TIntStringValue& other1) {
  intValue = other1.intValue;
  stringValue = other1.stringValue;
  __isset = other1.__isset;
  return *this;
}
void TIntStringValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TIntStringValue(";
  out << "intValue=" << to_string(intValue);
  out << ", " << "stringValue="; (__isset.stringValue ? (out << to_string(stringValue)) : (out << "<null>"));
  out << ")";
}


TIntStringStringValue::~TIntStringStringValue() throw() {
}


void TIntStringStringValue::__set_intValue(const int32_t val) {
  this->intValue = val;
}

void TIntStringStringValue::__set_stringValue1(const std::string& val) {
  this->stringValue1 = val;
__isset.stringValue1 = true;
}

void TIntStringStringValue::__set_stringValue2(const std::string& val) {
  this->stringValue2 = val;
__isset.stringValue2 = true;
}

uint32_t TIntStringStringValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->intValue);
          this->__isset.intValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringValue1);
          this->__isset.stringValue1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringValue2);
          this->__isset.stringValue2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TIntStringStringValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TIntStringStringValue");

  xfer += oprot->writeFieldBegin("intValue", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->intValue);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.stringValue1) {
    xfer += oprot->writeFieldBegin("stringValue1", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->stringValue1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stringValue2) {
    xfer += oprot->writeFieldBegin("stringValue2", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->stringValue2);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TIntStringStringValue &a, TIntStringStringValue &b) {
  using ::std::swap;
  swap(a.intValue, b.intValue);
  swap(a.stringValue1, b.stringValue1);
  swap(a.stringValue2, b.stringValue2);
  swap(a.__isset, b.__isset);
}

TIntStringStringValue::TIntStringStringValue(const TIntStringStringValue& other2) {
  intValue = other2.intValue;
  stringValue1 = other2.stringValue1;
  stringValue2 = other2.stringValue2;
  __isset = other2.__isset;
}
TIntStringStringValue& TIntStringStringValue::operator=(const TIntStringStringValue& other3) {
  intValue = other3.intValue;
  stringValue1 = other3.stringValue1;
  stringValue2 = other3.stringValue2;
  __isset = other3.__isset;
  return *this;
}
void TIntStringStringValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TIntStringStringValue(";
  out << "intValue=" << to_string(intValue);
  out << ", " << "stringValue1="; (__isset.stringValue1 ? (out << to_string(stringValue1)) : (out << "<null>"));
  out << ", " << "stringValue2="; (__isset.stringValue2 ? (out << to_string(stringValue2)) : (out << "<null>"));
  out << ")";
}


TAnnotationValue::~TAnnotationValue() throw() {
}


void TAnnotationValue::__set_stringValue(const std::string& val) {
  this->stringValue = val;
__isset.stringValue = true;
}

void TAnnotationValue::__set_boolValue(const bool val) {
  this->boolValue = val;
__isset.boolValue = true;
}

void TAnnotationValue::__set_intValue(const int32_t val) {
  this->intValue = val;
__isset.intValue = true;
}

void TAnnotationValue::__set_longValue(const int64_t val) {
  this->longValue = val;
__isset.longValue = true;
}

void TAnnotationValue::__set_shortValue(const int16_t val) {
  this->shortValue = val;
__isset.shortValue = true;
}

void TAnnotationValue::__set_doubleValue(const double val) {
  this->doubleValue = val;
__isset.doubleValue = true;
}

void TAnnotationValue::__set_binaryValue(const std::string& val) {
  this->binaryValue = val;
__isset.binaryValue = true;
}

void TAnnotationValue::__set_byteValue(const int8_t val) {
  this->byteValue = val;
__isset.byteValue = true;
}

void TAnnotationValue::__set_intStringValue(const TIntStringValue& val) {
  this->intStringValue = val;
__isset.intStringValue = true;
}

void TAnnotationValue::__set_intStringStringValue(const TIntStringStringValue& val) {
  this->intStringStringValue = val;
__isset.intStringStringValue = true;
}

uint32_t TAnnotationValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringValue);
          this->__isset.stringValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->boolValue);
          this->__isset.boolValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->intValue);
          this->__isset.intValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->longValue);
          this->__isset.longValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->shortValue);
          this->__isset.shortValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->doubleValue);
          this->__isset.doubleValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->binaryValue);
          this->__isset.binaryValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->byteValue);
          this->__isset.byteValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->intStringValue.read(iprot);
          this->__isset.intStringValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->intStringStringValue.read(iprot);
          this->__isset.intStringStringValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TAnnotationValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAnnotationValue");

  if (this->__isset.stringValue) {
    xfer += oprot->writeFieldBegin("stringValue", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->stringValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.boolValue) {
    xfer += oprot->writeFieldBegin("boolValue", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->boolValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.intValue) {
    xfer += oprot->writeFieldBegin("intValue", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->intValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.longValue) {
    xfer += oprot->writeFieldBegin("longValue", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->longValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shortValue) {
    xfer += oprot->writeFieldBegin("shortValue", ::apache::thrift::protocol::T_I16, 5);
    xfer += oprot->writeI16(this->shortValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.doubleValue) {
    xfer += oprot->writeFieldBegin("doubleValue", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->doubleValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.binaryValue) {
    xfer += oprot->writeFieldBegin("binaryValue", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeBinary(this->binaryValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.byteValue) {
    xfer += oprot->writeFieldBegin("byteValue", ::apache::thrift::protocol::T_BYTE, 8);
    xfer += oprot->writeByte(this->byteValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.intStringValue) {
    xfer += oprot->writeFieldBegin("intStringValue", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->intStringValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.intStringStringValue) {
    xfer += oprot->writeFieldBegin("intStringStringValue", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->intStringStringValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TAnnotationValue &a, TAnnotationValue &b) {
  using ::std::swap;
  swap(a.stringValue, b.stringValue);
  swap(a.boolValue, b.boolValue);
  swap(a.intValue, b.intValue);
  swap(a.longValue, b.longValue);
  swap(a.shortValue, b.shortValue);
  swap(a.doubleValue, b.doubleValue);
  swap(a.binaryValue, b.binaryValue);
  swap(a.byteValue, b.byteValue);
  swap(a.intStringValue, b.intStringValue);
  swap(a.intStringStringValue, b.intStringStringValue);
  swap(a.__isset, b.__isset);
}

TAnnotationValue::TAnnotationValue(const TAnnotationValue& other4) {
  stringValue = other4.stringValue;
  boolValue = other4.boolValue;
  intValue = other4.intValue;
  longValue = other4.longValue;
  shortValue = other4.shortValue;
  doubleValue = other4.doubleValue;
  binaryValue = other4.binaryValue;
  byteValue = other4.byteValue;
  intStringValue = other4.intStringValue;
  intStringStringValue = other4.intStringStringValue;
  __isset = other4.__isset;
}
TAnnotationValue& TAnnotationValue::operator=(const TAnnotationValue& other5) {
  stringValue = other5.stringValue;
  boolValue = other5.boolValue;
  intValue = other5.intValue;
  longValue = other5.longValue;
  shortValue = other5.shortValue;
  doubleValue = other5.doubleValue;
  binaryValue = other5.binaryValue;
  byteValue = other5.byteValue;
  intStringValue = other5.intStringValue;
  intStringStringValue = other5.intStringStringValue;
  __isset = other5.__isset;
  return *this;
}
void TAnnotationValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAnnotationValue(";
  out << "stringValue="; (__isset.stringValue ? (out << to_string(stringValue)) : (out << "<null>"));
  out << ", " << "boolValue="; (__isset.boolValue ? (out << to_string(boolValue)) : (out << "<null>"));
  out << ", " << "intValue="; (__isset.intValue ? (out << to_string(intValue)) : (out << "<null>"));
  out << ", " << "longValue="; (__isset.longValue ? (out << to_string(longValue)) : (out << "<null>"));
  out << ", " << "shortValue="; (__isset.shortValue ? (out << to_string(shortValue)) : (out << "<null>"));
  out << ", " << "doubleValue="; (__isset.doubleValue ? (out << to_string(doubleValue)) : (out << "<null>"));
  out << ", " << "binaryValue="; (__isset.binaryValue ? (out << to_string(binaryValue)) : (out << "<null>"));
  out << ", " << "byteValue="; (__isset.byteValue ? (out << to_string(byteValue)) : (out << "<null>"));
  out << ", " << "intStringValue="; (__isset.intStringValue ? (out << to_string(intStringValue)) : (out << "<null>"));
  out << ", " << "intStringStringValue="; (__isset.intStringStringValue ? (out << to_string(intStringStringValue)) : (out << "<null>"));
  out << ")";
}


TAnnotation::~TAnnotation() throw() {
}


void TAnnotation::__set_key(const int32_t val) {
  this->key = val;
}

void TAnnotation::__set_value(const TAnnotationValue& val) {
  this->value = val;
__isset.value = true;
}

uint32_t TAnnotation::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TAnnotation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAnnotation");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->key);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->value.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TAnnotation &a, TAnnotation &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

TAnnotation::TAnnotation(const TAnnotation& other6) {
  key = other6.key;
  value = other6.value;
  __isset = other6.__isset;
}
TAnnotation& TAnnotation::operator=(const TAnnotation& other7) {
  key = other7.key;
  value = other7.value;
  __isset = other7.__isset;
  return *this;
}
void TAnnotation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAnnotation(";
  out << "key=" << to_string(key);
  out << ", " << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ")";
}


TSpanEvent::~TSpanEvent() throw() {
}


void TSpanEvent::__set_spanId(const int64_t val) {
  this->spanId = val;
__isset.spanId = true;
}

void TSpanEvent::__set_sequence(const int16_t val) {
  this->sequence = val;
}

void TSpanEvent::__set_startElapsed(const int32_t val) {
  this->startElapsed = val;
}

void TSpanEvent::__set_endElapsed(const int32_t val) {
  this->endElapsed = val;
__isset.endElapsed = true;
}

void TSpanEvent::__set_rpc(const std::string& val) {
  this->rpc = val;
__isset.rpc = true;
}

void TSpanEvent::__set_serviceType(const int16_t val) {
  this->serviceType = val;
}

void TSpanEvent::__set_endPoint(const std::string& val) {
  this->endPoint = val;
__isset.endPoint = true;
}

void TSpanEvent::__set_annotations(const std::vector<TAnnotation> & val) {
  this->annotations = val;
__isset.annotations = true;
}

void TSpanEvent::__set_depth(const int32_t val) {
  this->depth = val;
__isset.depth = true;
}

void TSpanEvent::__set_nextSpanId(const int64_t val) {
  this->nextSpanId = val;
__isset.nextSpanId = true;
}

void TSpanEvent::__set_destinationId(const std::string& val) {
  this->destinationId = val;
__isset.destinationId = true;
}

void TSpanEvent::__set_apiId(const int32_t val) {
  this->apiId = val;
__isset.apiId = true;
}

void TSpanEvent::__set_exceptionInfo(const TIntStringValue& val) {
  this->exceptionInfo = val;
__isset.exceptionInfo = true;
}

void TSpanEvent::__set_asyncId(const int32_t val) {
  this->asyncId = val;
__isset.asyncId = true;
}

void TSpanEvent::__set_nextAsyncId(const int32_t val) {
  this->nextAsyncId = val;
__isset.nextAsyncId = true;
}

void TSpanEvent::__set_asyncSequence(const int16_t val) {
  this->asyncSequence = val;
__isset.asyncSequence = true;
}

uint32_t TSpanEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->spanId);
          this->__isset.spanId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->sequence);
          this->__isset.sequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startElapsed);
          this->__isset.startElapsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->endElapsed);
          this->__isset.endElapsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rpc);
          this->__isset.rpc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->serviceType);
          this->__isset.serviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->endPoint);
          this->__isset.endPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->annotations.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->annotations.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += this->annotations[_i12].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.annotations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->depth);
          this->__isset.depth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nextSpanId);
          this->__isset.nextSpanId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destinationId);
          this->__isset.destinationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->apiId);
          this->__isset.apiId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->exceptionInfo.read(iprot);
          this->__isset.exceptionInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->asyncId);
          this->__isset.asyncId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nextAsyncId);
          this->__isset.nextAsyncId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->asyncSequence);
          this->__isset.asyncSequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSpanEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TSpanEvent");

  if (this->__isset.spanId) {
    xfer += oprot->writeFieldBegin("spanId", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->spanId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("sequence", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->sequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startElapsed", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->startElapsed);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.endElapsed) {
    xfer += oprot->writeFieldBegin("endElapsed", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->endElapsed);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rpc) {
    xfer += oprot->writeFieldBegin("rpc", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->rpc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("serviceType", ::apache::thrift::protocol::T_I16, 12);
  xfer += oprot->writeI16(this->serviceType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.endPoint) {
    xfer += oprot->writeFieldBegin("endPoint", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->endPoint);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.annotations) {
    xfer += oprot->writeFieldBegin("annotations", ::apache::thrift::protocol::T_LIST, 14);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->annotations.size()));
      std::vector<TAnnotation> ::const_iterator _iter13;
      for (_iter13 = this->annotations.begin(); _iter13 != this->annotations.end(); ++_iter13)
      {
        xfer += (*_iter13).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.depth) {
    xfer += oprot->writeFieldBegin("depth", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32(this->depth);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nextSpanId) {
    xfer += oprot->writeFieldBegin("nextSpanId", ::apache::thrift::protocol::T_I64, 16);
    xfer += oprot->writeI64(this->nextSpanId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.destinationId) {
    xfer += oprot->writeFieldBegin("destinationId", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->destinationId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.apiId) {
    xfer += oprot->writeFieldBegin("apiId", ::apache::thrift::protocol::T_I32, 25);
    xfer += oprot->writeI32(this->apiId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exceptionInfo) {
    xfer += oprot->writeFieldBegin("exceptionInfo", ::apache::thrift::protocol::T_STRUCT, 26);
    xfer += this->exceptionInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.asyncId) {
    xfer += oprot->writeFieldBegin("asyncId", ::apache::thrift::protocol::T_I32, 30);
    xfer += oprot->writeI32(this->asyncId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nextAsyncId) {
    xfer += oprot->writeFieldBegin("nextAsyncId", ::apache::thrift::protocol::T_I32, 31);
    xfer += oprot->writeI32(this->nextAsyncId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.asyncSequence) {
    xfer += oprot->writeFieldBegin("asyncSequence", ::apache::thrift::protocol::T_I16, 32);
    xfer += oprot->writeI16(this->asyncSequence);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSpanEvent &a, TSpanEvent &b) {
  using ::std::swap;
  swap(a.spanId, b.spanId);
  swap(a.sequence, b.sequence);
  swap(a.startElapsed, b.startElapsed);
  swap(a.endElapsed, b.endElapsed);
  swap(a.rpc, b.rpc);
  swap(a.serviceType, b.serviceType);
  swap(a.endPoint, b.endPoint);
  swap(a.annotations, b.annotations);
  swap(a.depth, b.depth);
  swap(a.nextSpanId, b.nextSpanId);
  swap(a.destinationId, b.destinationId);
  swap(a.apiId, b.apiId);
  swap(a.exceptionInfo, b.exceptionInfo);
  swap(a.asyncId, b.asyncId);
  swap(a.nextAsyncId, b.nextAsyncId);
  swap(a.asyncSequence, b.asyncSequence);
  swap(a.__isset, b.__isset);
}

TSpanEvent::TSpanEvent(const TSpanEvent& other14) {
  spanId = other14.spanId;
  sequence = other14.sequence;
  startElapsed = other14.startElapsed;
  endElapsed = other14.endElapsed;
  rpc = other14.rpc;
  serviceType = other14.serviceType;
  endPoint = other14.endPoint;
  annotations = other14.annotations;
  depth = other14.depth;
  nextSpanId = other14.nextSpanId;
  destinationId = other14.destinationId;
  apiId = other14.apiId;
  exceptionInfo = other14.exceptionInfo;
  asyncId = other14.asyncId;
  nextAsyncId = other14.nextAsyncId;
  asyncSequence = other14.asyncSequence;
  __isset = other14.__isset;
}
TSpanEvent& TSpanEvent::operator=(const TSpanEvent& other15) {
  spanId = other15.spanId;
  sequence = other15.sequence;
  startElapsed = other15.startElapsed;
  endElapsed = other15.endElapsed;
  rpc = other15.rpc;
  serviceType = other15.serviceType;
  endPoint = other15.endPoint;
  annotations = other15.annotations;
  depth = other15.depth;
  nextSpanId = other15.nextSpanId;
  destinationId = other15.destinationId;
  apiId = other15.apiId;
  exceptionInfo = other15.exceptionInfo;
  asyncId = other15.asyncId;
  nextAsyncId = other15.nextAsyncId;
  asyncSequence = other15.asyncSequence;
  __isset = other15.__isset;
  return *this;
}
void TSpanEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TSpanEvent(";
  out << "spanId="; (__isset.spanId ? (out << to_string(spanId)) : (out << "<null>"));
  out << ", " << "sequence=" << to_string(sequence);
  out << ", " << "startElapsed=" << to_string(startElapsed);
  out << ", " << "endElapsed="; (__isset.endElapsed ? (out << to_string(endElapsed)) : (out << "<null>"));
  out << ", " << "rpc="; (__isset.rpc ? (out << to_string(rpc)) : (out << "<null>"));
  out << ", " << "serviceType=" << to_string(serviceType);
  out << ", " << "endPoint="; (__isset.endPoint ? (out << to_string(endPoint)) : (out << "<null>"));
  out << ", " << "annotations="; (__isset.annotations ? (out << to_string(annotations)) : (out << "<null>"));
  out << ", " << "depth="; (__isset.depth ? (out << to_string(depth)) : (out << "<null>"));
  out << ", " << "nextSpanId="; (__isset.nextSpanId ? (out << to_string(nextSpanId)) : (out << "<null>"));
  out << ", " << "destinationId="; (__isset.destinationId ? (out << to_string(destinationId)) : (out << "<null>"));
  out << ", " << "apiId="; (__isset.apiId ? (out << to_string(apiId)) : (out << "<null>"));
  out << ", " << "exceptionInfo="; (__isset.exceptionInfo ? (out << to_string(exceptionInfo)) : (out << "<null>"));
  out << ", " << "asyncId="; (__isset.asyncId ? (out << to_string(asyncId)) : (out << "<null>"));
  out << ", " << "nextAsyncId="; (__isset.nextAsyncId ? (out << to_string(nextAsyncId)) : (out << "<null>"));
  out << ", " << "asyncSequence="; (__isset.asyncSequence ? (out << to_string(asyncSequence)) : (out << "<null>"));
  out << ")";
}


TSpan::~TSpan() throw() {
}


void TSpan::__set_agentId(const std::string& val) {
  this->agentId = val;
}

void TSpan::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void TSpan::__set_agentStartTime(const int64_t val) {
  this->agentStartTime = val;
}

void TSpan::__set_transactionId(const std::string& val) {
  this->transactionId = val;
}

void TSpan::__set_spanId(const int64_t val) {
  this->spanId = val;
}

void TSpan::__set_parentSpanId(const int64_t val) {
  this->parentSpanId = val;
__isset.parentSpanId = true;
}

void TSpan::__set_startTime(const int64_t val) {
  this->startTime = val;
}

void TSpan::__set_elapsed(const int32_t val) {
  this->elapsed = val;
__isset.elapsed = true;
}

void TSpan::__set_rpc(const std::string& val) {
  this->rpc = val;
__isset.rpc = true;
}

void TSpan::__set_serviceType(const int16_t val) {
  this->serviceType = val;
}

void TSpan::__set_endPoint(const std::string& val) {
  this->endPoint = val;
__isset.endPoint = true;
}

void TSpan::__set_remoteAddr(const std::string& val) {
  this->remoteAddr = val;
__isset.remoteAddr = true;
}

void TSpan::__set_annotations(const std::vector<TAnnotation> & val) {
  this->annotations = val;
__isset.annotations = true;
}

void TSpan::__set_flag(const int16_t val) {
  this->flag = val;
__isset.flag = true;
}

void TSpan::__set_err(const int32_t val) {
  this->err = val;
__isset.err = true;
}

void TSpan::__set_spanEventList(const std::vector<TSpanEvent> & val) {
  this->spanEventList = val;
__isset.spanEventList = true;
}

void TSpan::__set_parentApplicationName(const std::string& val) {
  this->parentApplicationName = val;
__isset.parentApplicationName = true;
}

void TSpan::__set_parentApplicationType(const int16_t val) {
  this->parentApplicationType = val;
__isset.parentApplicationType = true;
}

void TSpan::__set_acceptorHost(const std::string& val) {
  this->acceptorHost = val;
__isset.acceptorHost = true;
}

void TSpan::__set_apiId(const int32_t val) {
  this->apiId = val;
__isset.apiId = true;
}

void TSpan::__set_exceptionInfo(const TIntStringValue& val) {
  this->exceptionInfo = val;
__isset.exceptionInfo = true;
}

void TSpan::__set_applicationServiceType(const int16_t val) {
  this->applicationServiceType = val;
__isset.applicationServiceType = true;
}

void TSpan::__set_loggingTransactionInfo(const int8_t val) {
  this->loggingTransactionInfo = val;
__isset.loggingTransactionInfo = true;
}

uint32_t TSpan::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->agentId);
          this->__isset.agentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->agentStartTime);
          this->__isset.agentStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->transactionId);
          this->__isset.transactionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->spanId);
          this->__isset.spanId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parentSpanId);
          this->__isset.parentSpanId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->elapsed);
          this->__isset.elapsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rpc);
          this->__isset.rpc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->serviceType);
          this->__isset.serviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->endPoint);
          this->__isset.endPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->remoteAddr);
          this->__isset.remoteAddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->annotations.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->annotations.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              xfer += this->annotations[_i20].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.annotations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->flag);
          this->__isset.flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->err);
          this->__isset.err = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->spanEventList.clear();
            uint32_t _size21;
            ::apache::thrift::protocol::TType _etype24;
            xfer += iprot->readListBegin(_etype24, _size21);
            this->spanEventList.resize(_size21);
            uint32_t _i25;
            for (_i25 = 0; _i25 < _size21; ++_i25)
            {
              xfer += this->spanEventList[_i25].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.spanEventList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parentApplicationName);
          this->__isset.parentApplicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->parentApplicationType);
          this->__isset.parentApplicationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->acceptorHost);
          this->__isset.acceptorHost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->apiId);
          this->__isset.apiId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->exceptionInfo.read(iprot);
          this->__isset.exceptionInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->applicationServiceType);
          this->__isset.applicationServiceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->loggingTransactionInfo);
          this->__isset.loggingTransactionInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSpan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TSpan");

  xfer += oprot->writeFieldBegin("agentId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->agentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("agentStartTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->agentStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transactionId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->transactionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spanId", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->spanId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.parentSpanId) {
    xfer += oprot->writeFieldBegin("parentSpanId", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->parentSpanId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->startTime);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.elapsed) {
    xfer += oprot->writeFieldBegin("elapsed", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->elapsed);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rpc) {
    xfer += oprot->writeFieldBegin("rpc", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->rpc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("serviceType", ::apache::thrift::protocol::T_I16, 12);
  xfer += oprot->writeI16(this->serviceType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.endPoint) {
    xfer += oprot->writeFieldBegin("endPoint", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->endPoint);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remoteAddr) {
    xfer += oprot->writeFieldBegin("remoteAddr", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->remoteAddr);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.annotations) {
    xfer += oprot->writeFieldBegin("annotations", ::apache::thrift::protocol::T_LIST, 15);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->annotations.size()));
      std::vector<TAnnotation> ::const_iterator _iter26;
      for (_iter26 = this->annotations.begin(); _iter26 != this->annotations.end(); ++_iter26)
      {
        xfer += (*_iter26).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.flag) {
    xfer += oprot->writeFieldBegin("flag", ::apache::thrift::protocol::T_I16, 16);
    xfer += oprot->writeI16(this->flag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.err) {
    xfer += oprot->writeFieldBegin("err", ::apache::thrift::protocol::T_I32, 17);
    xfer += oprot->writeI32(this->err);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.spanEventList) {
    xfer += oprot->writeFieldBegin("spanEventList", ::apache::thrift::protocol::T_LIST, 18);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->spanEventList.size()));
      std::vector<TSpanEvent> ::const_iterator _iter27;
      for (_iter27 = this->spanEventList.begin(); _iter27 != this->spanEventList.end(); ++_iter27)
      {
        xfer += (*_iter27).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parentApplicationName) {
    xfer += oprot->writeFieldBegin("parentApplicationName", ::apache::thrift::protocol::T_STRING, 19);
    xfer += oprot->writeString(this->parentApplicationName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parentApplicationType) {
    xfer += oprot->writeFieldBegin("parentApplicationType", ::apache::thrift::protocol::T_I16, 20);
    xfer += oprot->writeI16(this->parentApplicationType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.acceptorHost) {
    xfer += oprot->writeFieldBegin("acceptorHost", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->acceptorHost);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.apiId) {
    xfer += oprot->writeFieldBegin("apiId", ::apache::thrift::protocol::T_I32, 25);
    xfer += oprot->writeI32(this->apiId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exceptionInfo) {
    xfer += oprot->writeFieldBegin("exceptionInfo", ::apache::thrift::protocol::T_STRUCT, 26);
    xfer += this->exceptionInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.applicationServiceType) {
    xfer += oprot->writeFieldBegin("applicationServiceType", ::apache::thrift::protocol::T_I16, 30);
    xfer += oprot->writeI16(this->applicationServiceType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.loggingTransactionInfo) {
    xfer += oprot->writeFieldBegin("loggingTransactionInfo", ::apache::thrift::protocol::T_BYTE, 31);
    xfer += oprot->writeByte(this->loggingTransactionInfo);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSpan &a, TSpan &b) {
  using ::std::swap;
  swap(a.agentId, b.agentId);
  swap(a.applicationName, b.applicationName);
  swap(a.agentStartTime, b.agentStartTime);
  swap(a.transactionId, b.transactionId);
  swap(a.spanId, b.spanId);
  swap(a.parentSpanId, b.parentSpanId);
  swap(a.startTime, b.startTime);
  swap(a.elapsed, b.elapsed);
  swap(a.rpc, b.rpc);
  swap(a.serviceType, b.serviceType);
  swap(a.endPoint, b.endPoint);
  swap(a.remoteAddr, b.remoteAddr);
  swap(a.annotations, b.annotations);
  swap(a.flag, b.flag);
  swap(a.err, b.err);
  swap(a.spanEventList, b.spanEventList);
  swap(a.parentApplicationName, b.parentApplicationName);
  swap(a.parentApplicationType, b.parentApplicationType);
  swap(a.acceptorHost, b.acceptorHost);
  swap(a.apiId, b.apiId);
  swap(a.exceptionInfo, b.exceptionInfo);
  swap(a.applicationServiceType, b.applicationServiceType);
  swap(a.loggingTransactionInfo, b.loggingTransactionInfo);
  swap(a.__isset, b.__isset);
}

TSpan::TSpan(const TSpan& other28) {
  agentId = other28.agentId;
  applicationName = other28.applicationName;
  agentStartTime = other28.agentStartTime;
  transactionId = other28.transactionId;
  spanId = other28.spanId;
  parentSpanId = other28.parentSpanId;
  startTime = other28.startTime;
  elapsed = other28.elapsed;
  rpc = other28.rpc;
  serviceType = other28.serviceType;
  endPoint = other28.endPoint;
  remoteAddr = other28.remoteAddr;
  annotations = other28.annotations;
  flag = other28.flag;
  err = other28.err;
  spanEventList = other28.spanEventList;
  parentApplicationName = other28.parentApplicationName;
  parentApplicationType = other28.parentApplicationType;
  acceptorHost = other28.acceptorHost;
  apiId = other28.apiId;
  exceptionInfo = other28.exceptionInfo;
  applicationServiceType = other28.applicationServiceType;
  loggingTransactionInfo = other28.loggingTransactionInfo;
  __isset = other28.__isset;
}
TSpan& TSpan::operator=(const TSpan& other29) {
  agentId = other29.agentId;
  applicationName = other29.applicationName;
  agentStartTime = other29.agentStartTime;
  transactionId = other29.transactionId;
  spanId = other29.spanId;
  parentSpanId = other29.parentSpanId;
  startTime = other29.startTime;
  elapsed = other29.elapsed;
  rpc = other29.rpc;
  serviceType = other29.serviceType;
  endPoint = other29.endPoint;
  remoteAddr = other29.remoteAddr;
  annotations = other29.annotations;
  flag = other29.flag;
  err = other29.err;
  spanEventList = other29.spanEventList;
  parentApplicationName = other29.parentApplicationName;
  parentApplicationType = other29.parentApplicationType;
  acceptorHost = other29.acceptorHost;
  apiId = other29.apiId;
  exceptionInfo = other29.exceptionInfo;
  applicationServiceType = other29.applicationServiceType;
  loggingTransactionInfo = other29.loggingTransactionInfo;
  __isset = other29.__isset;
  return *this;
}
void TSpan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TSpan(";
  out << "agentId=" << to_string(agentId);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "agentStartTime=" << to_string(agentStartTime);
  out << ", " << "transactionId=" << to_string(transactionId);
  out << ", " << "spanId=" << to_string(spanId);
  out << ", " << "parentSpanId="; (__isset.parentSpanId ? (out << to_string(parentSpanId)) : (out << "<null>"));
  out << ", " << "startTime=" << to_string(startTime);
  out << ", " << "elapsed="; (__isset.elapsed ? (out << to_string(elapsed)) : (out << "<null>"));
  out << ", " << "rpc="; (__isset.rpc ? (out << to_string(rpc)) : (out << "<null>"));
  out << ", " << "serviceType=" << to_string(serviceType);
  out << ", " << "endPoint="; (__isset.endPoint ? (out << to_string(endPoint)) : (out << "<null>"));
  out << ", " << "remoteAddr="; (__isset.remoteAddr ? (out << to_string(remoteAddr)) : (out << "<null>"));
  out << ", " << "annotations="; (__isset.annotations ? (out << to_string(annotations)) : (out << "<null>"));
  out << ", " << "flag="; (__isset.flag ? (out << to_string(flag)) : (out << "<null>"));
  out << ", " << "err="; (__isset.err ? (out << to_string(err)) : (out << "<null>"));
  out << ", " << "spanEventList="; (__isset.spanEventList ? (out << to_string(spanEventList)) : (out << "<null>"));
  out << ", " << "parentApplicationName="; (__isset.parentApplicationName ? (out << to_string(parentApplicationName)) : (out << "<null>"));
  out << ", " << "parentApplicationType="; (__isset.parentApplicationType ? (out << to_string(parentApplicationType)) : (out << "<null>"));
  out << ", " << "acceptorHost="; (__isset.acceptorHost ? (out << to_string(acceptorHost)) : (out << "<null>"));
  out << ", " << "apiId="; (__isset.apiId ? (out << to_string(apiId)) : (out << "<null>"));
  out << ", " << "exceptionInfo="; (__isset.exceptionInfo ? (out << to_string(exceptionInfo)) : (out << "<null>"));
  out << ", " << "applicationServiceType="; (__isset.applicationServiceType ? (out << to_string(applicationServiceType)) : (out << "<null>"));
  out << ", " << "loggingTransactionInfo="; (__isset.loggingTransactionInfo ? (out << to_string(loggingTransactionInfo)) : (out << "<null>"));
  out << ")";
}


TSpanChunk::~TSpanChunk() throw() {
}


void TSpanChunk::__set_agentId(const std::string& val) {
  this->agentId = val;
}

void TSpanChunk::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void TSpanChunk::__set_agentStartTime(const int64_t val) {
  this->agentStartTime = val;
}

void TSpanChunk::__set_serviceType(const int16_t val) {
  this->serviceType = val;
}

void TSpanChunk::__set_transactionId(const std::string& val) {
  this->transactionId = val;
}

void TSpanChunk::__set_spanId(const int64_t val) {
  this->spanId = val;
}

void TSpanChunk::__set_endPoint(const std::string& val) {
  this->endPoint = val;
__isset.endPoint = true;
}

void TSpanChunk::__set_spanEventList(const std::vector<TSpanEvent> & val) {
  this->spanEventList = val;
}

void TSpanChunk::__set_applicationServiceType(const int16_t val) {
  this->applicationServiceType = val;
__isset.applicationServiceType = true;
}

uint32_t TSpanChunk::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->agentId);
          this->__isset.agentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->agentStartTime);
          this->__isset.agentStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->serviceType);
          this->__isset.serviceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->transactionId);
          this->__isset.transactionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->spanId);
          this->__isset.spanId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->endPoint);
          this->__isset.endPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->spanEventList.clear();
            uint32_t _size30;
            ::apache::thrift::protocol::TType _etype33;
            xfer += iprot->readListBegin(_etype33, _size30);
            this->spanEventList.resize(_size30);
            uint32_t _i34;
            for (_i34 = 0; _i34 < _size30; ++_i34)
            {
              xfer += this->spanEventList[_i34].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.spanEventList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->applicationServiceType);
          this->__isset.applicationServiceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSpanChunk::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TSpanChunk");

  xfer += oprot->writeFieldBegin("agentId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->agentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("agentStartTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->agentStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceType", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->serviceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transactionId", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->transactionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spanId", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->spanId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.endPoint) {
    xfer += oprot->writeFieldBegin("endPoint", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->endPoint);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("spanEventList", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->spanEventList.size()));
    std::vector<TSpanEvent> ::const_iterator _iter35;
    for (_iter35 = this->spanEventList.begin(); _iter35 != this->spanEventList.end(); ++_iter35)
    {
      xfer += (*_iter35).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.applicationServiceType) {
    xfer += oprot->writeFieldBegin("applicationServiceType", ::apache::thrift::protocol::T_I16, 11);
    xfer += oprot->writeI16(this->applicationServiceType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSpanChunk &a, TSpanChunk &b) {
  using ::std::swap;
  swap(a.agentId, b.agentId);
  swap(a.applicationName, b.applicationName);
  swap(a.agentStartTime, b.agentStartTime);
  swap(a.serviceType, b.serviceType);
  swap(a.transactionId, b.transactionId);
  swap(a.spanId, b.spanId);
  swap(a.endPoint, b.endPoint);
  swap(a.spanEventList, b.spanEventList);
  swap(a.applicationServiceType, b.applicationServiceType);
  swap(a.__isset, b.__isset);
}

TSpanChunk::TSpanChunk(const TSpanChunk& other36) {
  agentId = other36.agentId;
  applicationName = other36.applicationName;
  agentStartTime = other36.agentStartTime;
  serviceType = other36.serviceType;
  transactionId = other36.transactionId;
  spanId = other36.spanId;
  endPoint = other36.endPoint;
  spanEventList = other36.spanEventList;
  applicationServiceType = other36.applicationServiceType;
  __isset = other36.__isset;
}
TSpanChunk& TSpanChunk::operator=(const TSpanChunk& other37) {
  agentId = other37.agentId;
  applicationName = other37.applicationName;
  agentStartTime = other37.agentStartTime;
  serviceType = other37.serviceType;
  transactionId = other37.transactionId;
  spanId = other37.spanId;
  endPoint = other37.endPoint;
  spanEventList = other37.spanEventList;
  applicationServiceType = other37.applicationServiceType;
  __isset = other37.__isset;
  return *this;
}
void TSpanChunk::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TSpanChunk(";
  out << "agentId=" << to_string(agentId);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "agentStartTime=" << to_string(agentStartTime);
  out << ", " << "serviceType=" << to_string(serviceType);
  out << ", " << "transactionId=" << to_string(transactionId);
  out << ", " << "spanId=" << to_string(spanId);
  out << ", " << "endPoint="; (__isset.endPoint ? (out << to_string(endPoint)) : (out << "<null>"));
  out << ", " << "spanEventList=" << to_string(spanEventList);
  out << ", " << "applicationServiceType="; (__isset.applicationServiceType ? (out << to_string(applicationServiceType)) : (out << "<null>"));
  out << ")";
}


TStringMetaData::~TStringMetaData() throw() {
}


void TStringMetaData::__set_agentId(const std::string& val) {
  this->agentId = val;
}

void TStringMetaData::__set_agentStartTime(const int64_t val) {
  this->agentStartTime = val;
}

void TStringMetaData::__set_stringId(const int32_t val) {
  this->stringId = val;
}

void TStringMetaData::__set_stringValue(const std::string& val) {
  this->stringValue = val;
}

uint32_t TStringMetaData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->agentId);
          this->__isset.agentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->agentStartTime);
          this->__isset.agentStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stringId);
          this->__isset.stringId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringValue);
          this->__isset.stringValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TStringMetaData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TStringMetaData");

  xfer += oprot->writeFieldBegin("agentId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->agentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("agentStartTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->agentStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stringId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->stringId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stringValue", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->stringValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TStringMetaData &a, TStringMetaData &b) {
  using ::std::swap;
  swap(a.agentId, b.agentId);
  swap(a.agentStartTime, b.agentStartTime);
  swap(a.stringId, b.stringId);
  swap(a.stringValue, b.stringValue);
  swap(a.__isset, b.__isset);
}

TStringMetaData::TStringMetaData(const TStringMetaData& other38) {
  agentId = other38.agentId;
  agentStartTime = other38.agentStartTime;
  stringId = other38.stringId;
  stringValue = other38.stringValue;
  __isset = other38.__isset;
}
TStringMetaData& TStringMetaData::operator=(const TStringMetaData& other39) {
  agentId = other39.agentId;
  agentStartTime = other39.agentStartTime;
  stringId = other39.stringId;
  stringValue = other39.stringValue;
  __isset = other39.__isset;
  return *this;
}
void TStringMetaData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStringMetaData(";
  out << "agentId=" << to_string(agentId);
  out << ", " << "agentStartTime=" << to_string(agentStartTime);
  out << ", " << "stringId=" << to_string(stringId);
  out << ", " << "stringValue=" << to_string(stringValue);
  out << ")";
}


TSqlMetaData::~TSqlMetaData() throw() {
}


void TSqlMetaData::__set_agentId(const std::string& val) {
  this->agentId = val;
}

void TSqlMetaData::__set_agentStartTime(const int64_t val) {
  this->agentStartTime = val;
}

void TSqlMetaData::__set_sqlId(const int32_t val) {
  this->sqlId = val;
}

void TSqlMetaData::__set_sql(const std::string& val) {
  this->sql = val;
}

uint32_t TSqlMetaData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->agentId);
          this->__isset.agentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->agentStartTime);
          this->__isset.agentStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sqlId);
          this->__isset.sqlId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sql);
          this->__isset.sql = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSqlMetaData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TSqlMetaData");

  xfer += oprot->writeFieldBegin("agentId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->agentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("agentStartTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->agentStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sqlId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->sqlId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sql", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->sql);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSqlMetaData &a, TSqlMetaData &b) {
  using ::std::swap;
  swap(a.agentId, b.agentId);
  swap(a.agentStartTime, b.agentStartTime);
  swap(a.sqlId, b.sqlId);
  swap(a.sql, b.sql);
  swap(a.__isset, b.__isset);
}

TSqlMetaData::TSqlMetaData(const TSqlMetaData& other40) {
  agentId = other40.agentId;
  agentStartTime = other40.agentStartTime;
  sqlId = other40.sqlId;
  sql = other40.sql;
  __isset = other40.__isset;
}
TSqlMetaData& TSqlMetaData::operator=(const TSqlMetaData& other41) {
  agentId = other41.agentId;
  agentStartTime = other41.agentStartTime;
  sqlId = other41.sqlId;
  sql = other41.sql;
  __isset = other41.__isset;
  return *this;
}
void TSqlMetaData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TSqlMetaData(";
  out << "agentId=" << to_string(agentId);
  out << ", " << "agentStartTime=" << to_string(agentStartTime);
  out << ", " << "sqlId=" << to_string(sqlId);
  out << ", " << "sql=" << to_string(sql);
  out << ")";
}


TApiMetaData::~TApiMetaData() throw() {
}


void TApiMetaData::__set_agentId(const std::string& val) {
  this->agentId = val;
}

void TApiMetaData::__set_agentStartTime(const int64_t val) {
  this->agentStartTime = val;
}

void TApiMetaData::__set_apiId(const int32_t val) {
  this->apiId = val;
}

void TApiMetaData::__set_apiInfo(const std::string& val) {
  this->apiInfo = val;
}

void TApiMetaData::__set_line(const int32_t val) {
  this->line = val;
__isset.line = true;
}

void TApiMetaData::__set_type(const int32_t val) {
  this->type = val;
__isset.type = true;
}

uint32_t TApiMetaData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->agentId);
          this->__isset.agentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->agentStartTime);
          this->__isset.agentStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->apiId);
          this->__isset.apiId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->apiInfo);
          this->__isset.apiInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->line);
          this->__isset.line = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TApiMetaData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TApiMetaData");

  xfer += oprot->writeFieldBegin("agentId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->agentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("agentStartTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->agentStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("apiId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->apiId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("apiInfo", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->apiInfo);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.line) {
    xfer += oprot->writeFieldBegin("line", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->line);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TApiMetaData &a, TApiMetaData &b) {
  using ::std::swap;
  swap(a.agentId, b.agentId);
  swap(a.agentStartTime, b.agentStartTime);
  swap(a.apiId, b.apiId);
  swap(a.apiInfo, b.apiInfo);
  swap(a.line, b.line);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

TApiMetaData::TApiMetaData(const TApiMetaData& other42) {
  agentId = other42.agentId;
  agentStartTime = other42.agentStartTime;
  apiId = other42.apiId;
  apiInfo = other42.apiInfo;
  line = other42.line;
  type = other42.type;
  __isset = other42.__isset;
}
TApiMetaData& TApiMetaData::operator=(const TApiMetaData& other43) {
  agentId = other43.agentId;
  agentStartTime = other43.agentStartTime;
  apiId = other43.apiId;
  apiInfo = other43.apiInfo;
  line = other43.line;
  type = other43.type;
  __isset = other43.__isset;
  return *this;
}
void TApiMetaData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TApiMetaData(";
  out << "agentId=" << to_string(agentId);
  out << ", " << "agentStartTime=" << to_string(agentStartTime);
  out << ", " << "apiId=" << to_string(apiId);
  out << ", " << "apiInfo=" << to_string(apiInfo);
  out << ", " << "line="; (__isset.line ? (out << to_string(line)) : (out << "<null>"));
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ")";
}


TResult::~TResult() throw() {
}


void TResult::__set_success(const bool val) {
  this->success = val;
}

void TResult::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

uint32_t TResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TResult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->success);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TResult &a, TResult &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

TResult::TResult(const TResult& other44) {
  success = other44.success;
  message = other44.message;
  __isset = other44.__isset;
}
TResult& TResult::operator=(const TResult& other45) {
  success = other45.success;
  message = other45.message;
  __isset = other45.__isset;
  return *this;
}
void TResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TResult(";
  out << "success=" << to_string(success);
  out << ", " << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ")";
}


